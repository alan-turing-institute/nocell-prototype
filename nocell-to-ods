#!/usr/bin/env racket
#lang racket
(require "./nocell/main.rkt")
(require "./raw/to-raw.rkt")
(require "./raw/to-zip.rkt")

(let* ([arguments (vector->list (current-command-line-arguments))])
    (unless (equal? 2 (length arguments)) (begin (printf "nocell-to-ods <nocell-source> <ods-target>~n~nWill translate a nocell source file into an ods spreadshet~ne.g., nocell-to-ods examples/dcf.nocell dcf.ods~n") (exit -1)))
    (define (load-dependencies nocell)
      (apply append (map (lambda (statement) (match statement
                                 [(list 'require f) (load-nocell f)]
                                 [_ (list statement)]
                                 )) nocell))
      
      )
    (define (load-nocell name) (load-dependencies (file->value (path->complete-path (string->path name) (current-directory)))))
    (let* ([ods (path->complete-path (string->path (last arguments)) (current-directory) )]
       [nocell (load-nocell (first arguments))]
       [stack (nocell->stack nocell)]
       [grid (stack->grid stack)]
       [raw (workbook->raw (list (grid->raw-worksheet "sheet 1" (first grid))) (second grid))]
      )
      (printf "Translating ~a into ~a~n" (first arguments) ods)
      (raw->zip raw ods)
      (printf "Finished~n")
      )
)
