; -*- racket -*-
#lang racket
(require "../../../cell.rkt")
(provide result)
(define result
(list
 (assignment '%a0 '(result) '() '%sum3 (array 103) #f 'result '())
 (assignment
  '%a1
  '()
  '()
  (mutable-array 103)
  (mutable-array 103)
  #f
  'result-mean
  '())
 (assignment '%a2 '() '() (array 0) (array 0) #f 'result-var '())
 (assignment
  '%sum3
  '()
  '((1 . %a0))
  '((+ () ()) %b0 %e4)
  (array 103)
  #f
  'body
  '())
 (assignment
  '%e4
  '()
  '((1 . %a0))
  (mutable-array 0)
  (mutable-array 0)
  #f
  'body
  '())
 (assignment '%b0 '(tmp) '((1 . %a0)) '%sum2 (array 103) #f 'result '())
 (assignment
  '%b1
  '()
  '((1 . %a0))
  (mutable-array 103)
  (mutable-array 103)
  #f
  'result-mean
  '())
 (assignment '%b2 '() '((1 . %a0)) (array 0) (array 0) #f 'result-var '())
 (assignment
  '%sum2
  '()
  '((2 . %b0) (1 . %a0))
  '((+ () ()) %arg0 %sum1)
  (array 103)
  #f
  'body
  '())
 (assignment
  '%sum1
  '()
  '((2 . %b0) (1 . %a0))
  '((+ () ()) %e2 %e3)
  (array 101)
  #f
  'body
  '())
 (assignment
  '%e3
  '(c)
  '((2 . %b0) (1 . %a0))
  (mutable-array 1)
  (mutable-array 1)
  #f
  'body
  '())
 (assignment
  '%e2
  '(z)
  '((1 . %a0))
  (mutable-array 100)
  (mutable-array 100)
  #f
  'body
  '())
 (assignment '%arg0 '(x) '() '%sum0 (array 2) #f 'last-arg '())
 (assignment '%sum0 '() '() '((+ () ()) %e0 %e1) (array 2) #f 'body '())
 (assignment '%e1 '() '() (mutable-array 2) (mutable-array 2) #f 'body '())
 (assignment '%e0 '(z) '() (mutable-array 0) (mutable-array 0) #f 'body '())))