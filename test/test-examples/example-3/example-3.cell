; -*- racket -*-
#lang racket
(require "../../../cell.rkt")
(provide result)
(define result
(list
 (assignment
  '%sum0
  '(result)
  '()
  '((+ () ()) %a0 %e1)
  (array 101)
  #f
  'body
  '())
 (assignment '%e1 '(c) '() (mutable-array 1) (mutable-array 1) #f 'body '())
 (assignment '%a0 '() '() '%b0 (mutable-array 100) #f 'result '())
 (assignment
  '%a1
  '()
  '()
  (mutable-array 100)
  (mutable-array 100)
  #f
  'result-mean
  '())
 (assignment '%a2 '() '() (array 0) (array 0) #f 'result-var '())
 (assignment '%b0 '() '((1 . %a0)) '%e2 (mutable-array 100) #f 'result '())
 (assignment
  '%b1
  '()
  '((1 . %a0))
  (mutable-array 100)
  (mutable-array 100)
  #f
  'result-mean
  '())
 (assignment '%b2 '() '((1 . %a0)) (array 0) (array 0) #f 'result-var '())
 (assignment
  '%e2
  '(c)
  '((2 . %b0) (1 . %a0))
  '%arg0
  (mutable-array 100)
  #f
  'body
  '())
 (assignment
  '%arg0
  '(x)
  '((1 . %a0))
  '%e0
  (mutable-array 100)
  #f
  'last-arg
  '())
 (assignment
  '%e0
  '(z)
  '()
  (mutable-array 100)
  (mutable-array 100)
  #f
  'body
  '())))