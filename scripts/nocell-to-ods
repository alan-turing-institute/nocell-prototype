#!/usr/bin/env racket
#lang racket
(require "../private/nocell-old/main.rkt")
(require "../private/raw/to-raw.rkt")
(require "../private/raw/to-zip.rkt")

(let* ([arguments (vector->list (current-command-line-arguments))])
    (unless (equal? 2 (length arguments)) (begin (printf "nocell-to-ods <nocell-source> <ods-target>~n~nWill translate a nocell source file into an ods spreadshet~ne.g., nocell-to-ods examples/dcf.nocell dcf.ods~n") (exit -1)))
    (define (relative-path file-path require-path)
      (let-values (((dir a b) (split-path file-path))) 
        (path->complete-path (string->path require-path) dir)
        )
      )
    (define (load-dependencies path nocell)
      (apply append (map (lambda (statement) (match statement
                                 [(list 'require f) (load-nocell (relative-path path f))]
                                 [_ (list statement)]
                                 )) nocell))
      
      )
    (define (load-nocell path) (load-dependencies path (file->value path)))
    (let* ([source (path->complete-path (string->path (first arguments)) (current-directory))]
           [ods (path->complete-path (string->path (last arguments)) (current-directory) )]
       [nocell (load-nocell source)]
       [stack (nocell->stack nocell)]
       [grid (stack->grid stack)]
       [raw (workbook->raw (list (grid->raw-worksheet "sheet 1" (first grid))) (second grid))]
      )
      (printf "Translating ~a into ~a~n" source ods)
      (raw->zip raw ods)
      (printf "Finished~n")
      )
)
